// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/bi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackingServerClient is the client API for TrackingServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackingServerClient interface {
	AddIncomingRecord(ctx context.Context, in *IncomingRecord, opts ...grpc.CallOption) (*Response, error)
	AddOutgoingRecord(ctx context.Context, in *OutgoingRecord, opts ...grpc.CallOption) (*Response, error)
	AddPagevisitRecord(ctx context.Context, in *PagevisitRecord, opts ...grpc.CallOption) (*Response, error)
}

type trackingServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackingServerClient(cc grpc.ClientConnInterface) TrackingServerClient {
	return &trackingServerClient{cc}
}

func (c *trackingServerClient) AddIncomingRecord(ctx context.Context, in *IncomingRecord, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/tracking.TrackingServer/AddIncomingRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServerClient) AddOutgoingRecord(ctx context.Context, in *OutgoingRecord, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/tracking.TrackingServer/AddOutgoingRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServerClient) AddPagevisitRecord(ctx context.Context, in *PagevisitRecord, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/tracking.TrackingServer/AddPagevisitRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackingServerServer is the server API for TrackingServer service.
// All implementations must embed UnimplementedTrackingServerServer
// for forward compatibility
type TrackingServerServer interface {
	AddIncomingRecord(context.Context, *IncomingRecord) (*Response, error)
	AddOutgoingRecord(context.Context, *OutgoingRecord) (*Response, error)
	AddPagevisitRecord(context.Context, *PagevisitRecord) (*Response, error)
	mustEmbedUnimplementedTrackingServerServer()
}

// UnimplementedTrackingServerServer must be embedded to have forward compatible implementations.
type UnimplementedTrackingServerServer struct {
}

func (UnimplementedTrackingServerServer) AddIncomingRecord(context.Context, *IncomingRecord) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIncomingRecord not implemented")
}
func (UnimplementedTrackingServerServer) AddOutgoingRecord(context.Context, *OutgoingRecord) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOutgoingRecord not implemented")
}
func (UnimplementedTrackingServerServer) AddPagevisitRecord(context.Context, *PagevisitRecord) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPagevisitRecord not implemented")
}
func (UnimplementedTrackingServerServer) mustEmbedUnimplementedTrackingServerServer() {}

// UnsafeTrackingServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackingServerServer will
// result in compilation errors.
type UnsafeTrackingServerServer interface {
	mustEmbedUnimplementedTrackingServerServer()
}

func RegisterTrackingServerServer(s grpc.ServiceRegistrar, srv TrackingServerServer) {
	s.RegisterService(&TrackingServer_ServiceDesc, srv)
}

func _TrackingServer_AddIncomingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServerServer).AddIncomingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.TrackingServer/AddIncomingRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServerServer).AddIncomingRecord(ctx, req.(*IncomingRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingServer_AddOutgoingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutgoingRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServerServer).AddOutgoingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.TrackingServer/AddOutgoingRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServerServer).AddOutgoingRecord(ctx, req.(*OutgoingRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingServer_AddPagevisitRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagevisitRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServerServer).AddPagevisitRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.TrackingServer/AddPagevisitRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServerServer).AddPagevisitRecord(ctx, req.(*PagevisitRecord))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackingServer_ServiceDesc is the grpc.ServiceDesc for TrackingServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackingServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracking.TrackingServer",
	HandlerType: (*TrackingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIncomingRecord",
			Handler:    _TrackingServer_AddIncomingRecord_Handler,
		},
		{
			MethodName: "AddOutgoingRecord",
			Handler:    _TrackingServer_AddOutgoingRecord_Handler,
		},
		{
			MethodName: "AddPagevisitRecord",
			Handler:    _TrackingServer_AddPagevisitRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/bi.proto",
}
